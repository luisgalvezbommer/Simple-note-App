"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksimple_note_app"] = self["webpackChunksimple_note_app"] || []).push([["vendors-node_modules_capacitor-firebase_authentication_dist_esm_web_js"],{

/***/ "./node_modules/@capacitor-firebase/authentication/dist/esm/web.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@capacitor-firebase/authentication/dist/esm/web.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirebaseAuthenticationWeb: () => (/* binding */ FirebaseAuthenticationWeb)\n/* harmony export */ });\n/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ \"./node_modules/@capacitor/core/dist/index.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var _definitions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./definitions */ \"./node_modules/@capacitor-firebase/authentication/dist/esm/definitions.js\");\n\n\n\nclass FirebaseAuthenticationWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {\n    constructor() {\n        super();\n        this.lastConfirmationResult = new Map();\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        auth.onAuthStateChanged(user => this.handleAuthStateChange(user));\n        auth.onIdTokenChanged(user => void this.handleIdTokenChange(user));\n    }\n    async applyActionCode(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.applyActionCode)(auth, options.oobCode);\n    }\n    async createUserWithEmailAndPassword(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.createUserWithEmailAndPassword)(auth, options.email, options.password);\n        return this.createSignInResult(userCredential, null);\n    }\n    async confirmPasswordReset(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.confirmPasswordReset)(auth, options.oobCode, options.newPassword);\n    }\n    async confirmVerificationCode(options) {\n        const { verificationCode, verificationId } = options;\n        const confirmationResult = this.lastConfirmationResult.get(verificationId);\n        if (!confirmationResult) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_CONFIRMATION_RESULT_MISSING);\n        }\n        const userCredential = await confirmationResult.confirm(verificationCode);\n        return this.createSignInResult(userCredential, null);\n    }\n    async deleteUser() {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.deleteUser)(currentUser);\n    }\n    async fetchSignInMethodsForEmail(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const signInMethods = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.fetchSignInMethodsForEmail)(auth, options.email);\n        return {\n            signInMethods,\n        };\n    }\n    async getPendingAuthResult() {\n        this.throwNotAvailableError();\n    }\n    async getCurrentUser() {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const userResult = this.createUserResult(auth.currentUser);\n        const result = {\n            user: userResult,\n        };\n        return result;\n    }\n    async getIdToken(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        if (!auth.currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        const idToken = await auth.currentUser.getIdToken(options === null || options === void 0 ? void 0 : options.forceRefresh);\n        const result = {\n            token: idToken || '',\n        };\n        return result;\n    }\n    async getRedirectResult() {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getRedirectResult)(auth);\n        const authCredential = userCredential\n            ? firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider.credentialFromResult(userCredential)\n            : null;\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async getTenantId() {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        return {\n            tenantId: auth.tenantId,\n        };\n    }\n    async isSignInWithEmailLink(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        return {\n            isSignInWithEmailLink: (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.isSignInWithEmailLink)(auth, options.emailLink),\n        };\n    }\n    async linkWithApple(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider(_definitions__WEBPACK_IMPORTED_MODULE_2__.ProviderId.APPLE);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithEmailAndPassword(options) {\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.EmailAuthProvider.credential(options.email, options.password);\n        const userCredential = await this.linkCurrentUserWithCredential(authCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithEmailLink(options) {\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.EmailAuthProvider.credentialWithLink(options.email, options.emailLink);\n        const userCredential = await this.linkCurrentUserWithCredential(authCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithFacebook(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.FacebookAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.FacebookAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithGameCenter() {\n        this.throwNotAvailableError();\n    }\n    async linkWithGithub(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GithubAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GithubAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithGoogle(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GoogleAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GoogleAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithMicrosoft(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider(_definitions__WEBPACK_IMPORTED_MODULE_2__.ProviderId.MICROSOFT);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithOpenIdConnect(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider(options.providerId);\n        this.applySignInOptions(options, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithPhoneNumber(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        if (!options.phoneNumber) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING);\n        }\n        if (!options.recaptchaVerifier ||\n            !(options.recaptchaVerifier instanceof firebase_auth__WEBPACK_IMPORTED_MODULE_1__.RecaptchaVerifier)) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING);\n        }\n        try {\n            const confirmationResult = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.linkWithPhoneNumber)(currentUser, options.phoneNumber, options.recaptchaVerifier);\n            const { verificationId } = confirmationResult;\n            this.lastConfirmationResult.set(verificationId, confirmationResult);\n            const event = {\n                verificationId,\n            };\n            this.notifyListeners(FirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT, event);\n        }\n        catch (error) {\n            const event = {\n                message: this.getErrorMessage(error),\n            };\n            this.notifyListeners(FirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT, event);\n        }\n    }\n    async linkWithPlayGames() {\n        this.throwNotAvailableError();\n    }\n    async linkWithTwitter(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.TwitterAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.TwitterAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithYahoo(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider(_definitions__WEBPACK_IMPORTED_MODULE_2__.ProviderId.YAHOO);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async reload() {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.reload)(currentUser);\n    }\n    async revokeAccessToken(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.revokeAccessToken)(auth, options.token);\n    }\n    async sendEmailVerification(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.sendEmailVerification)(currentUser, options === null || options === void 0 ? void 0 : options.actionCodeSettings);\n    }\n    async sendPasswordResetEmail(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.sendPasswordResetEmail)(auth, options.email, options.actionCodeSettings);\n    }\n    async sendSignInLinkToEmail(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.sendSignInLinkToEmail)(auth, options.email, options.actionCodeSettings);\n    }\n    async setLanguageCode(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        auth.languageCode = options.languageCode;\n    }\n    async setPersistence(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        switch (options.persistence) {\n            case _definitions__WEBPACK_IMPORTED_MODULE_2__.Persistence.BrowserLocal:\n                await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.setPersistence)(auth, firebase_auth__WEBPACK_IMPORTED_MODULE_1__.browserLocalPersistence);\n                break;\n            case _definitions__WEBPACK_IMPORTED_MODULE_2__.Persistence.BrowserSession:\n                await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.setPersistence)(auth, firebase_auth__WEBPACK_IMPORTED_MODULE_1__.browserSessionPersistence);\n                break;\n            case _definitions__WEBPACK_IMPORTED_MODULE_2__.Persistence.IndexedDbLocal:\n                await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.setPersistence)(auth, firebase_auth__WEBPACK_IMPORTED_MODULE_1__.indexedDBLocalPersistence);\n                break;\n            case _definitions__WEBPACK_IMPORTED_MODULE_2__.Persistence.InMemory:\n                await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.setPersistence)(auth, firebase_auth__WEBPACK_IMPORTED_MODULE_1__.inMemoryPersistence);\n                break;\n        }\n    }\n    async setTenantId(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        auth.tenantId = options.tenantId;\n    }\n    async signInAnonymously() {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signInAnonymously)(auth);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithApple(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider(_definitions__WEBPACK_IMPORTED_MODULE_2__.ProviderId.APPLE);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithCustomToken(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signInWithCustomToken)(auth, options.token);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithEmailAndPassword(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signInWithEmailAndPassword)(auth, options.email, options.password);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithEmailLink(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signInWithEmailLink)(auth, options.email, options.emailLink);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithFacebook(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.FacebookAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.FacebookAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithGithub(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GithubAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GithubAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithGoogle(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GoogleAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GoogleAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithMicrosoft(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider(_definitions__WEBPACK_IMPORTED_MODULE_2__.ProviderId.MICROSOFT);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithOpenIdConnect(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider(options.providerId);\n        this.applySignInOptions(options, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithPhoneNumber(options) {\n        if (!options.phoneNumber) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING);\n        }\n        if (!options.recaptchaVerifier ||\n            !(options.recaptchaVerifier instanceof firebase_auth__WEBPACK_IMPORTED_MODULE_1__.RecaptchaVerifier)) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING);\n        }\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        try {\n            const confirmationResult = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signInWithPhoneNumber)(auth, options.phoneNumber, options.recaptchaVerifier);\n            const { verificationId } = confirmationResult;\n            this.lastConfirmationResult.set(verificationId, confirmationResult);\n            const event = {\n                verificationId,\n            };\n            this.notifyListeners(FirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT, event);\n        }\n        catch (error) {\n            const event = {\n                message: this.getErrorMessage(error),\n            };\n            this.notifyListeners(FirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT, event);\n        }\n    }\n    async signInWithPlayGames() {\n        this.throwNotAvailableError();\n    }\n    async signInWithGameCenter() {\n        this.throwNotAvailableError();\n    }\n    async signInWithTwitter(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.TwitterAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.TwitterAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithYahoo(options) {\n        const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider(_definitions__WEBPACK_IMPORTED_MODULE_2__.ProviderId.YAHOO);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signOut() {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        await auth.signOut();\n    }\n    async unlink(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        if (!auth.currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        const user = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.unlink)(auth.currentUser, options.providerId);\n        const userResult = this.createUserResult(user);\n        const result = {\n            user: userResult,\n        };\n        return result;\n    }\n    async updateEmail(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.updateEmail)(currentUser, options.newEmail);\n    }\n    async updatePassword(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.updatePassword)(currentUser, options.newPassword);\n    }\n    async updateProfile(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.updateProfile)(currentUser, {\n            displayName: options.displayName,\n            photoURL: options.photoUrl,\n        });\n    }\n    async useAppLanguage() {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        auth.useDeviceLanguage();\n    }\n    async useEmulator(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const port = options.port || 9099;\n        const scheme = options.scheme || 'http';\n        if (options.host.includes('://')) {\n            (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.connectAuthEmulator)(auth, `${options.host}:${port}`);\n        }\n        else {\n            (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.connectAuthEmulator)(auth, `${scheme}://${options.host}:${port}`);\n        }\n    }\n    async verifyBeforeUpdateEmail(options) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.verifyBeforeUpdateEmail)(currentUser, options === null || options === void 0 ? void 0 : options.newEmail, options === null || options === void 0 ? void 0 : options.actionCodeSettings);\n    }\n    handleAuthStateChange(user) {\n        const userResult = this.createUserResult(user);\n        const change = {\n            user: userResult,\n        };\n        this.notifyListeners(FirebaseAuthenticationWeb.AUTH_STATE_CHANGE_EVENT, change, true);\n    }\n    async handleIdTokenChange(user) {\n        if (!user) {\n            return;\n        }\n        const idToken = await user.getIdToken(false);\n        const result = {\n            token: idToken,\n        };\n        this.notifyListeners(FirebaseAuthenticationWeb.ID_TOKEN_CHANGE_EVENT, result, true);\n    }\n    applySignInOptions(options, provider) {\n        if (options.customParameters) {\n            const customParameters = {};\n            options.customParameters.map(parameter => {\n                customParameters[parameter.key] = parameter.value;\n            });\n            provider.setCustomParameters(customParameters);\n        }\n        if (options.scopes) {\n            for (const scope of options.scopes) {\n                provider.addScope(scope);\n            }\n        }\n    }\n    signInWithPopupOrRedirect(provider, mode) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        if (mode === 'redirect') {\n            return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signInWithRedirect)(auth, provider);\n        }\n        else {\n            return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signInWithPopup)(auth, provider);\n        }\n    }\n    linkCurrentUserWithPopupOrRedirect(provider, mode) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        if (!auth.currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        if (mode === 'redirect') {\n            return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.linkWithRedirect)(auth.currentUser, provider);\n        }\n        else {\n            return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.linkWithPopup)(auth.currentUser, provider);\n        }\n    }\n    linkCurrentUserWithCredential(credential) {\n        const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)();\n        if (!auth.currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.linkWithCredential)(auth.currentUser, credential);\n    }\n    requestAppTrackingTransparencyPermission() {\n        this.throwNotAvailableError();\n    }\n    checkAppTrackingTransparencyPermission() {\n        this.throwNotAvailableError();\n    }\n    createSignInResult(userCredential, authCredential) {\n        const userResult = this.createUserResult((userCredential === null || userCredential === void 0 ? void 0 : userCredential.user) || null);\n        const credentialResult = this.createCredentialResult(authCredential);\n        const additionalUserInfoResult = this.createAdditionalUserInfoResult(userCredential);\n        const result = {\n            user: userResult,\n            credential: credentialResult,\n            additionalUserInfo: additionalUserInfoResult,\n        };\n        return result;\n    }\n    createCredentialResult(credential) {\n        if (!credential) {\n            return null;\n        }\n        const result = {\n            providerId: credential.providerId,\n        };\n        if (credential instanceof firebase_auth__WEBPACK_IMPORTED_MODULE_1__.OAuthCredential) {\n            result.accessToken = credential.accessToken;\n            result.idToken = credential.idToken;\n            result.secret = credential.secret;\n        }\n        return result;\n    }\n    createUserResult(user) {\n        if (!user) {\n            return null;\n        }\n        const result = {\n            displayName: user.displayName,\n            email: user.email,\n            emailVerified: user.emailVerified,\n            isAnonymous: user.isAnonymous,\n            metadata: this.createUserMetadataResult(user.metadata),\n            phoneNumber: user.phoneNumber,\n            photoUrl: user.photoURL,\n            providerData: this.createUserProviderDataResult(user.providerData),\n            providerId: user.providerId,\n            tenantId: user.tenantId,\n            uid: user.uid,\n        };\n        return result;\n    }\n    createUserMetadataResult(metadata) {\n        const result = {};\n        if (metadata.creationTime) {\n            result.creationTime = Date.parse(metadata.creationTime);\n        }\n        if (metadata.lastSignInTime) {\n            result.lastSignInTime = Date.parse(metadata.lastSignInTime);\n        }\n        return result;\n    }\n    createUserProviderDataResult(providerData) {\n        return providerData.map(data => ({\n            displayName: data.displayName,\n            email: data.email,\n            phoneNumber: data.phoneNumber,\n            photoUrl: data.photoURL,\n            providerId: data.providerId,\n            uid: data.uid,\n        }));\n    }\n    createAdditionalUserInfoResult(credential) {\n        if (!credential) {\n            return null;\n        }\n        const additionalUserInfo = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAdditionalUserInfo)(credential);\n        if (!additionalUserInfo) {\n            return null;\n        }\n        const { isNewUser, profile, providerId, username } = additionalUserInfo;\n        const result = {\n            isNewUser,\n        };\n        if (providerId !== null) {\n            result.providerId = providerId;\n        }\n        if (profile !== null) {\n            result.profile = profile;\n        }\n        if (username !== null && username !== undefined) {\n            result.username = username;\n        }\n        return result;\n    }\n    getErrorMessage(error) {\n        if (error instanceof Object &&\n            'message' in error &&\n            typeof error['message'] === 'string') {\n            return error['message'];\n        }\n        return JSON.stringify(error);\n    }\n    throwNotAvailableError() {\n        throw new Error('Not available on web.');\n    }\n}\nFirebaseAuthenticationWeb.AUTH_STATE_CHANGE_EVENT = 'authStateChange';\nFirebaseAuthenticationWeb.ID_TOKEN_CHANGE_EVENT = 'idTokenChange';\nFirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT = 'phoneCodeSent';\nFirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT = 'phoneVerificationFailed';\nFirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN = 'No user is signed in.';\nFirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING = 'phoneNumber must be provided.';\nFirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING = 'recaptchaVerifier must be provided and must be an instance of RecaptchaVerifier.';\nFirebaseAuthenticationWeb.ERROR_CONFIRMATION_RESULT_MISSING = 'No confirmation result with this verification id was found.';\n//# sourceMappingURL=web.js.map\n\n//# sourceURL=webpack://simple-note-app/./node_modules/@capacitor-firebase/authentication/dist/esm/web.js?\n}");

/***/ })

}]);